---
import BaseLayout from '../layouts/BaseLayout.astro';
import fs from 'node:fs';
import path from 'node:path';
import { getCollection } from 'astro:content';
// 确认导入路径正确

// 定义音频文件类型
interface AudioFile {
  name: string;
  slug: string;
  url: string;
  fileName: string;
}

// 定义播客元数据类型
interface PodcastMetadata {
  title: string;
  description: string;
  coverImage: string;
  duration: string;
}

// 获取音频文件列表
const audioDir = path.join(process.cwd(), 'public', 'audio');
let audioFiles: AudioFile[] = [];

try {
  audioFiles = fs
    .readdirSync(audioDir)
    .filter(file => file.endsWith('.mp3'))
    .map(file => ({
      name: file.replace('.mp3', ''),
      slug: file.replace('.mp3', ''),
      url: `/api/audio/${file.replace('.mp3', '')}`,
      fileName: file
    }));
} catch (error) {
  console.error('读取音频目录出错:', error);
}

// 获取播客元数据
const posts = await getCollection('posts');
const podcastMetadata = new Map<string, PodcastMetadata>();

// 筛选出类型为播客的内容
const podcasts = posts.filter(post => post.data.type === 'podcast');

podcasts.forEach((podcast) => {
  // 使用post对象的slug属性，而不是post.data.slug
  podcastMetadata.set(podcast.slug, {
    title: podcast.data.title,
    description: podcast.data.description,
    coverImage: podcast.data.coverImage || '/images/podcast-default.jpg',
    duration: podcast.data.duration || '' // 提供默认值避免undefined
  });
});
---

<BaseLayout title="音乐播放器" description="聚财众发音乐播放器 - 按文件结构播放所有音频文件">
  <main class="container mx-auto px-4 py-8 md:py-12 lg:py-16 max-w-6xl">
    <h1 class="text-3xl md:text-4xl font-bold text-center text-gray-900 mb-10">音乐播放器</h1>

    <!-- 播放器主体 -->
    <div class="bg-gradient-to-br from-blue-50 to-indigo-100 rounded-xl shadow-lg overflow-hidden mb-10">
      <!-- 当前播放信息 -->
      <div class="p-6 md:p-8 flex flex-col md:flex-row items-center gap-6 border-b border-blue-200">
        <div class="w-32 h-32 md:w-40 md:h-40 rounded-lg overflow-hidden shadow-md bg-white p-2">
          <img id="current-cover" src="/images/podcast-default.jpg" alt="当前播放封面" class="w-full h-full object-cover rounded">
        </div>
        <div class="flex-1 min-w-0">
          <h2 id="current-title" class="text-xl md:text-2xl font-bold text-gray-900 mb-2 truncate">未选择音频</h2>
          <p id="current-description" class="text-gray-600 mb-4 line-clamp-2">请从播放列表中选择一个音频文件</p>
          <div class="flex items-center gap-2 text-sm text-gray-500">
            <span id="current-duration">00:00</span>
            <span>/</span>
            <span id="total-duration">00:00</span>
          </div>
        </div>
      </div>

      <!-- 播放控制 -->
      <div class="p-6 md:p-8 bg-white">
        <!-- 进度条 -->
        <div class="mb-6">
          <input
            type="range"
            id="progress-bar"
            min="0"
            max="100"
            value="0"
            class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-600"
          >
        </div>

        <!-- 控制按钮 -->
        <div class="flex justify-center items-center gap-6 md:gap-8 mb-6">
          <button id="shuffle-btn" class="text-gray-500 hover:text-blue-600 transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
          </button>
          <button id="prev-btn" class="text-gray-500 hover:text-blue-600 transition-colors">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>
          </button>
          <button id="play-btn" class="w-14 h-14 bg-blue-600 hover:bg-blue-700 rounded-full flex items-center justify-center text-white shadow-lg transition-all transform hover:scale-105">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
          </button>
          <button id="next-btn" class="text-gray-500 hover:text-blue-600 transition-colors">
            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>
          </button>
          <button id="repeat-btn" class="text-gray-500 hover:text-blue-600 transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path></svg>
          </button>
        </div>

        <!-- 音量控制 -->
        <div class="flex justify-center items-center gap-3">
          <button id="volume-btn" class="text-gray-500 hover:text-blue-600 transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"></path></svg>
          </button>
          <input
            type="range"
            id="volume-bar"
            min="0"
            max="100"
            value="80"
            class="w-32 md:w-48 h-1 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-600"
          >
        </div>
      </div>
    </div>

    <!-- 播放列表 -->
    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
      <div class="p-6 md:p-8 border-b border-gray-200">
        <h2 class="text-2xl font-bold text-gray-900">播放列表</h2>
        <p class="text-gray-600 mt-1">共 {audioFiles.length} 个音频文件</p>
      </div>
      <div class="max-h-[400px] overflow-y-auto">
        <ul id="playlist" class="divide-y divide-gray-200">
          {audioFiles.length > 0 ? (
            audioFiles.map((audio, index) => {
              // 获取元数据，如果不存在则提供默认值
              const metadata = podcastMetadata.get(audio.slug) || {
                title: '',
                description: '',
                coverImage: '/images/podcast-default.jpg',
                duration: ''
              } as PodcastMetadata;
              return (
                <li
                  data-key={audio.slug}
                  data-index={index}
                  class="p-4 md:p-6 hover:bg-gray-50 cursor-pointer transition-colors"
                >
                  <div class="flex items-center gap-4">
                    <div class="w-10 h-10 bg-blue-100 rounded-md flex items-center justify-center text-blue-600">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                    </div>
                    <div class="flex-1 min-w-0">
                      <h3 class="font-semibold text-gray-900 truncate">{metadata.title || audio.name}</h3>
                      <p class="text-sm text-gray-500 mt-1 truncate">{metadata.description || audio.fileName}</p>
                    </div>
                    <div class="text-sm text-gray-500 whitespace-nowrap">
                      {metadata.duration || '未知时长'}
                    </div>
                  </div>
                </li>
              );
            })
          ) : (
            <li class="p-6 text-center text-gray-500">
              未找到音频文件
            </li>
          )}
        </ul>
      </div>
    </div>
  </main>

  <script define:vars={{ audioFiles, podcastMetadata }}>
    document.addEventListener('DOMContentLoaded', () => {
      // 获取DOM元素
      const audio = new Audio();
      const playBtn = document.getElementById('play-btn');
      const prevBtn = document.getElementById('prev-btn');
      const nextBtn = document.getElementById('next-btn');
      const shuffleBtn = document.getElementById('shuffle-btn');
      const repeatBtn = document.getElementById('repeat-btn');
      const progressBar = document.getElementById('progress-bar');
      const volumeBar = document.getElementById('volume-bar');
      const volumeBtn = document.getElementById('volume-btn');
      const currentTitle = document.getElementById('current-title');
      const currentDescription = document.getElementById('current-description');
      const currentCover = document.getElementById('current-cover');
      const currentDuration = document.getElementById('current-duration');
      const totalDuration = document.getElementById('total-duration');
      const playlist = document.getElementById('playlist');

      // 播放器状态
      let currentIndex = -1;
      let isPlaying = false;
      let isShuffle = false;
      let repeatMode = 'off'; // 'off', 'one', 'all'
      let originalAudioFiles = [...audioFiles];

      // 设置音量
      audio.volume = volumeBar.value / 100;

      // 格式化时间
      const formatTime = (seconds) => {
        const minutes = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
      };

      // 加载音频
      const loadAudio = (index) => {
        if (index < 0 || index >= audioFiles.length) return;

        currentIndex = index;
        const audioFile = audioFiles[currentIndex];
        const metadata = podcastMetadata.get(audioFile.slug) || {};

        // 更新当前播放信息
        currentTitle.textContent = metadata.title || audioFile.name;
        currentDescription.textContent = metadata.description || audioFile.fileName;
        currentCover.src = metadata.coverImage || '/images/podcast-default.jpg';
        currentCover.alt = metadata.title || audioFile.name;

        // 加载音频
        audio.src = audioFile.url;

        // 如果当前是播放状态，则加载后立即播放
        if (isPlaying) {
          audio.play().catch(error => {
            console.error('播放失败:', error);
            isPlaying = false;
            updatePlayButton();
          });
        }
      };

      // 播放/暂停切换
      const togglePlay = () => {
        if (currentIndex === -1 && audioFiles.length > 0) {
          // 如果没有选择音频，则默认播放第一个
          loadAudio(0);
          isPlaying = true;
          audio.play().catch(error => {
            console.error('播放失败:', error);
            isPlaying = false;
            updatePlayButton();
          });
        } else {
          if (isPlaying) {
            audio.pause();
          } else {
            audio.play().catch(error => {
              console.error('播放失败:', error);
              isPlaying = false;
              updatePlayButton();
            });
          }
          isPlaying = !isPlaying;
        }
        updatePlayButton();
      };

      // 更新播放按钮图标
      const updatePlayButton = () => {
        const icon = playBtn.querySelector('svg');
        if (isPlaying) {
          icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>';
        } else {
          icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>';
        }
      };

      // 上一曲
      const prevTrack = () => {
        if (currentIndex > 0) {
          loadAudio(currentIndex - 1);
        } else if (repeatMode === 'all') {
          loadAudio(audioFiles.length - 1);
        }
      };

      // 下一曲
      const nextTrack = () => {
        if (currentIndex < audioFiles.length - 1) {
          loadAudio(currentIndex + 1);
        } else if (repeatMode === 'all') {
          loadAudio(0);
        }
      };

      // 随机播放
      const toggleShuffle = () => {
        isShuffle = !isShuffle;
        shuffleBtn.classList.toggle('text-blue-600', isShuffle);

        if (isShuffle) {
          // 随机打乱播放列表
          audioFiles = [...originalAudioFiles].sort(() => Math.random() - 0.5);
        } else {
          // 恢复原始播放列表
          audioFiles = [...originalAudioFiles];
        }

        // 如果当前正在播放，重新加载当前索引的音频
        if (currentIndex !== -1) {
          const currentSlug = originalAudioFiles[currentIndex].slug;
          const newIndex = audioFiles.findIndex(file => file.slug === currentSlug);
          if (newIndex !== -1) {
            currentIndex = newIndex;
          }
        }
      };

      // 切换循环模式
      const toggleRepeat = () => {
        if (repeatMode === 'off') {
          repeatMode = 'one';
          repeatBtn.classList.add('text-blue-600');
          repeatBtn.querySelector('svg').innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>';
        } else if (repeatMode === 'one') {
          repeatMode = 'all';
          repeatBtn.querySelector('svg').innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 3a2.85 2.83 0 114 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path>';
        } else {
          repeatMode = 'off';
          repeatBtn.classList.remove('text-blue-600');
          repeatBtn.querySelector('svg').innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>';
        }
      };

      // 事件监听器
      playBtn.addEventListener('click', togglePlay);
      prevBtn.addEventListener('click', prevTrack);
      nextBtn.addEventListener('click', nextTrack);
      shuffleBtn.addEventListener('click', toggleShuffle);
      repeatBtn.addEventListener('click', toggleRepeat);

      // 进度条事件
      progressBar.addEventListener('input', () => {
        const progress = audio.duration * (progressBar.value / 100);
        audio.currentTime = progress;
      });

      // 音量控制事件
      volumeBar.addEventListener('input', () => {
        audio.volume = volumeBar.value / 100;
      });

      // 静音切换
      volumeBtn.addEventListener('click', () => {
        audio.muted = !audio.muted;
        volumeBtn.classList.toggle('text-blue-600', audio.muted);
        if (audio.muted) {
          volumeBtn.querySelector('svg').innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"></path><line stroke-linecap="round" stroke-linejoin="round" stroke-width="2" x1="15" y1="12" x2="21" y2="12"></line><line stroke-linecap="round" stroke-linejoin="round" stroke-width="2" x1="18" y1="9" x2="18" y2="15"></line>';
        } else {
          volumeBtn.querySelector('svg').innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"></path>';
        }
      });

      // 音频事件
      audio.addEventListener('timeupdate', () => {
        // 更新进度条
        const progress = (audio.currentTime / audio.duration) * 100;
        progressBar.value = progress;

        // 更新当前时间
        currentDuration.textContent = formatTime(audio.currentTime);
      });

      audio.addEventListener('loadedmetadata', () => {
        // 更新总时长
        totalDuration.textContent = formatTime(audio.duration);
      });

      audio.addEventListener('ended', () => {
        if (repeatMode === 'one') {
          // 单曲循环
          audio.currentTime = 0;
          audio.play();
        } else {
          // 下一曲
          nextTrack();
        }
      });

      // 播放列表点击事件
      playlist.addEventListener('click', (e) => {
        const li = e.target.closest('li');
        if (li) {
          const index = parseInt(li.dataset.index);
          if (!isNaN(index)) {
            loadAudio(index);
            isPlaying = true;
            audio.play().catch(error => {
              console.error('播放失败:', error);
              isPlaying = false;
              updatePlayButton();
            });
            updatePlayButton();
          }
        }
      });
    });
  </script>
</BaseLayout>