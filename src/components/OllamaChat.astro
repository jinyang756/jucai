---
// Ollama 智能客服组件
import { useState, useEffect, useRef } from 'react';

// 定义消息类型
interface Message {
  id: number;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

// 导出组件
export default function OllamaChat() {
  // 初始化状态
  const [messages, setMessages] = useState([
    { id: 0, text: '您好！我是智能客服，请问有什么可以帮助您的？', isUser: false, timestamp: new Date() }
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // 滚动到最新消息
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // 发送消息
  const sendMessage = () => {
    if (inputText.trim() === '') return;

    const newMessage = {
      id: messages.length,
      text: inputText,
      isUser: true,
      timestamp: new Date()
    };

    setMessages([...messages, newMessage]);
    setInputText('');
    setIsTyping(true);

    // 模拟Ollama响应
    setTimeout(() => {
      const botResponse = {
        id: messages.length + 1,
        text: '感谢您的咨询！我们的客服人员会尽快回复您。您也可以通过电话 +852 46761866 或邮箱 Athen@lianghuatozi.com 联系我们。',
        isUser: false,
        timestamp: new Date()
      };

      setMessages([...messages, newMessage, botResponse]);
      setIsTyping(false);
    }, 1500);
  };

  // 监听消息变化，滚动到底部
  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  return (
    <div class="ollama-chat">
      <div class="chat-header">智能客服</div>
      <div class="chat-messages" ref={messagesEndRef}>
        {messages.map(message => (
          <div key={message.id} class={`message ${message.isUser ? 'user' : 'bot'}`}>
            {message.text}
          </div>
        ))}
        {isTyping && (
          <div class="typing-indicator">
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
          </div>
        )}
      </div>
      <div class="chat-input">
        <input
          type="text"
          value={inputText}
          onChange={(e) => setInputText(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
          placeholder="请输入您的问题..."
        />
        <button onClick={sendMessage}>发送</button>
      </div>
    </div>
  );
}
---

<style>
  .ollama-chat {
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }
  .chat-header {
    background-color: #1a73e8;
    color: white;
    padding: 15px;
    text-align: center;
    font-weight: bold;
  }
  .chat-messages {
    height: 400px;
    overflow-y: auto;
    padding: 15px;
  }
  .message {
    margin-bottom: 15px;
    padding: 10px 15px;
    border-radius: 18px;
    max-width: 80%;
    word-break: break-word;
  }
  .message.user {
    background-color: #dcf8c6;
    margin-left: auto;
  }
  .message.bot {
    background-color: #e5e5ea;
  }
  .chat-input {
    display: flex;
    padding: 15px;
    border-top: 1px solid #eee;
  }
  .chat-input input {
    flex: 1;
    padding: 10px 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-right: 10px;
  }
  .chat-input button {
    padding: 10px 20px;
    background-color: #1a73e8;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  .chat-input button:hover {
    background-color: #0d47a1;
  }
  .typing-indicator {
    display: flex;
    align-items: center;
    padding: 10px;
  }
  .typing-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: #999;
    margin: 0 2px;
    animation: typing 1.4s infinite ease-in-out both;
  }
  .typing-dot:nth-child(1) {
    animation-delay: -0.32s;
  }
  .typing-dot:nth-child(2) {
    animation-delay: -0.16s;
  }
  @keyframes typing {
    0%, 80%, 100% {
      transform: scale(0);
    }
    40% {
      transform: scale(1);
    }
  }
</style>